import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchApps } from './appCatalogAPI';

export interface IAppCatalogState {
  apps: IApp[];
  status: 'idle' | 'loading' | 'failed';
  error?: string;
}

const initialState: IAppCatalogState = {
  apps: [],
  status: 'idle',
};

export const fetchAppsAsync = createAsyncThunk(
  'appCatalog/fetchApps',
  fetchApps
);

export const appCatalogSlice = createSlice({
  name: 'appCatalog',
  initialState,
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAppsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAppsAsync.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      })
      .addCase(fetchAppsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.apps = action.payload;
      });
  },
});

export const selectApps = (state: RootState) => state.appCatalog.apps;
export const selectStatus = (state: RootState) => ({
  status: state.appCatalog.status,
  error: state.appCatalog.error,
});

export default appCatalogSlice.reducer;
